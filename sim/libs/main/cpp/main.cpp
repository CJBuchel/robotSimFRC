/*
 * This C++ source file was generated by the Gradle 'init' task.
 */
#include "main.h"

void FPSController() {
	// Determin FPS of program (ish)
	double ms = 1000/sim.getSimData().window.FPS; // 60 FPS = 16.6ms every cycle
	if (sim.getSimData().window.FPS == 0) {
		ms = 1;
	}

	// Use waitkey to wait and detect if user inputs esc
	if (cv::waitKey(ms) == 27) {
		running = false;
	}
}

int main(int argc, char const *argv[]) {
	std::cout << "Simulator Start [PRESS ESC TO EXIT]" << std::endl;
	running = true;
	std::cout << "Creating window..." << std::endl;

	// Initialize Simulator
	sim.Init();

	auto start = high_resolution_clock::now(); // Start timer
	auto stop = high_resolution_clock::now(); // End timer
	auto duration = duration_cast<milliseconds>(stop - start);
	double currentTime, lastTime, dt;

	double count = 0;
	double ACTUAL_CPS, cycles;
	while (running) {
		currentTime = duration.count();
		dt = currentTime - lastTime;

		sim.OnUpdate();
		sim.getWindow()->update();
		sim.getWindow()->reset();
		
		sim.getWindow()->drawInfoText("Set CPS: " + std::to_string(sim.getSimData().window.FPS) + " Actual CPS: " + std::to_string(ACTUAL_CPS));
		sim.getWindow()->drawInfoText("Delta time: " + std::to_string(dt));
		sim.getWindow()->drawInfoText("Counter: " + std::to_string(count));
		sim.getWindow()->drawInfoText("Window Size: " + std::to_string(sim.getSimData().window.Width) + "x" + std::to_string(sim.getSimData().window.Height));
		FPSController();
		std::cout << "Dt: " << dt << std::endl;

		stop = high_resolution_clock::now();
		duration = duration_cast<milliseconds>(stop - start);

		count += dt;
		cycles += 1;
		if (count >= 1000) {
			count = 0;
			ACTUAL_CPS = cycles;
			cycles = 0;
		}
		lastTime = currentTime;
	}



	std::cout << "Program end" << std::endl;

	return 0;
}